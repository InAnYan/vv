import re
from enum import Enum


class QuestionType(Enum):
    # Якщо неохідно вибрати два поняття:
    #
    #   Вища освіта всім чи її мають здобувати лише кращі?
    #   Яка праця більше варта поваги – фізична чи інтелектуальна?
    #   Як краще досягати успіху – самотужки чи в колективі?
    #   Ким краще бути в сучасному світі – романтиком чи раціоналістом?
    #   Що ж важче: будувати надхмарні споруди чи жити в них?
    #
    # Можна побачити, що ключевим словом для цього типу є тире, двокрапка та "чи".
    # З "чи" є проблема: воно занадто часто зустрічається у тезах
    #
    # В такій тезі треба розпарсити вибори.
    # В результаті обрати один вибір.
    #
    CHOICE = 1

    # Треба відповісти, може щось чи щось не може.
    # Треба пошукати більше тез, можливо це занадто абстрактний тип.
    #
    #   Чи вища освіта може замінити практичний досвід?
    #   Чи має право наука абстрагуватися від питань моралі?
    #   Чи можливе ідеальне суспільство без ідеальної сім’ї?
    #   Чи можна подолати проблему батьків / дітей (старшого / молодшого покоління)?
    #   Чи можлива в суспільному житті гармонія?
    #   * Чи не призведе розвиток науки до деградації духовності людини?
    #
    # Знову ключове слово - "чи". Поряд ідуть слова: "може" "має" "можливе" "можна" "треба".
    #
    # В такій тезі треба вибрати головне поняття, або дію, навколо якої іде мова.
    # В результаті треба відповісти: так чи ні, можливо чи ні
    #
    CAN_OR_NOT = 2

    # Якщо треба викласти свої методи розв'язання проблеми, критерії:
    #
    #   За якими критеріями краще обирати професію?
    #   Які чинники впливають на формування людини як особистості?
    #   Що руйнує сім’ю?
    #   Що робить групу людей нацією?
    #   У чому цінність мистецтва?
    #   У чому користь технологій?
    #
    # Тут багато ключових слів: "за якими" "які чинники" "чинники" "що" "у чому".
    #
    # У тезі треба виділити головне поняття.
    # В результаті треба щось перелічити. Добре ще пов'язати приклади з аргументами.
    # Поки що не знаю, що з цього повинно вийти.
    #
    WHICH = 3

    # Складний тип, схожий на WHICH, бо теж треба самому придумати якісь причини чогось.
    #
    #   Чому занепадають цивілізації?
    #   Чому важливо знати уроки історії?
    #
    # Ключове слово: "чому" на початку речення.
    #
    # Взагалі, тут не потрібно нічого парсити, можна зразу це гуглити.
    # В результати треба перелічити причини. Поки що не знаю, що з цього повинно вийти.
    #
    WHY = 4

    # Питання на кількість. Цікавий тип, але чогось не можу знайти прикладів.
    #
    #   На скільки людині варто дослухатися до думки оточення про неї?
    #
    # Треба відповісти: "повністю",
    #
    # Можливо тут теж парсити нічого не потрібно.
    # В результаті повинно бути: "повністю" "частково" "ніскільки".
    #
    HOW_MUCH = 5

    # Повертає тип питання на основі тексту питання.
    # Вважаємо, що текст питання поданий без помилок.
    @staticmethod
    def determine(txt: str) -> QuestionType:
        # Алгоритм:
        # 1. Трансформувати текст у простішу форму: прибрати непотрібні символи, все з малої букви, букви у слова
        # 2. Створити словник з типом ключа - тип питання, а типом значень - на скільки алгоритм впевнений,
        #    що це питання має відповідний тип.
        # 3. Перебирати слова у списку слів.
        # 3.1. Якщо певне слово або сполучення слів відповідають якомусь критерію певного типу запитання, тоді збільшити
        #      на 1 відповідне значення у словнику.
        # 4. Тип питання в результаті - це той тип, який міститься в словнику й має найбільше значення впевненості.
        # 5. Якщо у словнику все по нулям, або декілька типів мають одну й ту саму впевненість, то це помилка.

        if type(txt) is not str:
            raise TypeError("'txt' should be a str")

        transformed_txt = transform_text(txt)
        split_txt = transformed_txt.split(' ')
        words = list(filter(lambda x: x != '', split_txt))

        types_dict = {
            QuestionType.CHOICE: 0,
            QuestionType.CAN_OR_NOT: 0,
            QuestionType.WHY: 0,
            QuestionType.WHICH: 0,
            QuestionType.HOW_MUCH: 0
        }

        i = 0
        while i < len(words):
            for ques_type, keywords in QuestionType_KEYWORDS.items():
                for keyword in keywords:
                    if isinstance(keyword, str):
                        if words[i] == keyword:
                            types_dict[ques_type] += 1
                    else:
                        assert False
            i += 1

        sorted_items = sorted(types_dict.items(), key=lambda x: x[1], reverse=True)
        picked_res = []
        for e in sorted_items:
            if len(picked_res) == 0:
                picked_res.append(e)
            elif e[1] == picked_res[-1]:
                picked_res.append(e)
            else:
                break

        if len(picked_res) != 1 or picked_res[0][1] == 0:
            raise ValueError("'txt' is not a valid question or function has failed to determine type of question")

        return picked_res[0][0]

# Перелік ключових слів для типів питань
QuestionType_KEYWORDS = {
    QuestionType.CHOICE: [':', ',', 'чи'],
    QuestionType.CAN_OR_NOT: ['чи', 'може', 'можливо', 'можна', 'можливе', 'треба', 'необхідно', 'має'],
    QuestionType.WHICH: ['за', 'якими', 'критерії', 'критеріями', 'критеріями', 'чинники', 'що', 'у', 'чому'],
    QuestionType.WHY: ['чому'],
    QuestionType.HOW_MUCH: ['на', 'скільки']
}


def transform_text(txt: str) -> str:
    return re.sub('[?.!,"<>»«/\\\']', '', txt.lower()).replace('–', '-')
